(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{473:function(e,t,a){"use strict";a.r(t);var o=a(2),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"day-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#day-2"}},[e._v("#")]),e._v(" Day 2")]),e._v(" "),a("p",[a("em",[e._v("12/1/2020")])]),e._v(" "),a("h2",{attrs:{id:"what-i-learned-in-coding-school-is"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-i-learned-in-coding-school-is"}},[e._v("#")]),e._v(" What i learned in coding school is...")]),e._v(" "),a("p",[e._v("how to code")]),e._v(" "),a("h2",{attrs:{id:"_1-what-is-a-pseudo-class-and-what-are-some-of-the-most-common-ones-you-think-you-will-use"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-what-is-a-pseudo-class-and-what-are-some-of-the-most-common-ones-you-think-you-will-use"}},[e._v("#")]),e._v(" 1. What is a Pseudo-Class and what are some of the most common ones you think you will use")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("    Pseudo-Classes are used to add special effects to the sectors.\n    The syntax of a Pseudo-Class is:\n    selector:pseudo-class \n    {\n      property:value;\n    }\n  Examples of Pseudo Class:\n")])])]),a("ol",[a("li",[e._v(":hover--\x3e It adds special style to elements when you use your mouse over it.\nSyntax:\nbutton:hover{\ncolor:#ff0000;} /"),a("em",[e._v("When you bring your mouse over the button it  will change its color to red(#ff0000)")]),e._v("/")]),e._v(" "),a("li",[e._v('::after (:after)--\x3e It adds the content after the selector.\nSyntax:\np:after{\ncontent: "hello";}  /* It will add "hello" after p-tag/paragraph*/')]),e._v(" "),a("li",[e._v('::before (:before)--\x3eIt adds the content before the selector.\nSyntax:\np:before{\ncontent: "hello";}  /'),a("em",[e._v('It will add "hello" before p-tag/paragraph')]),e._v("/")]),e._v(" "),a("li",[e._v(":disabled--\x3e It means it can not be active, which means elements can not do any function.\nSyntax:\ninput:disabled{background-color:#808080;}  /"),a("em",[e._v("Input is disabled")]),e._v("/")]),e._v(" "),a("li",[e._v(":enabled--\x3e It means it are active, which means elements can do a specific function.\nSyntax:\ninput:enabled{color:#fffff0;}  /"),a("em",[e._v("Input is enabled")]),e._v("/")]),e._v(" "),a("li",[e._v(":root--\x3eIt is useful for declaring global css variables.\nSyntax:\n:root{--primary-color:#ff0000}  /"),a("em",[e._v("primary-color can be used multiple times")]),e._v("/")])]),e._v(" "),a("h2",{attrs:{id:"_2-what-is-specificity-and-how-might-you-use-it-to-your-benefit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-what-is-specificity-and-how-might-you-use-it-to-your-benefit"}},[e._v("#")]),e._v(" 2. What is Specificity and how might you use it to your benefit?")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("      Specificity is defined as a set of rules applied on selectors that determines which style to be applied on an element. It can be very beneficial when writing a code. It helps to write a clean and organized code.\n      There are various rules for styling an element based on the specificity. For example:\n    1. ID Selectors have a higher specificity than attribute selectors.\n    2. Inline ID Selectors have a higher specificity than external ID Selectors.\n    3. Class Selectors have higher specificity than element selector.\n    4. If in case the elements have equal specificity, style of the last element should apply.\n    order--\x3e    Inline ID Selectors>ID Selectors>Class Selectors>Element Selectors  \n")])])]),a("h2",{attrs:{id:"_3-what-problems-do-you-think-you-could-run-into-if-you-over-utilized-the-important-feature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-what-problems-do-you-think-you-could-run-into-if-you-over-utilized-the-important-feature"}},[e._v("#")]),e._v(" 3. What problems do you think you could run into if you over-utilized the !important feature?")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('      Using a single !important is not a problem, its just a lazy way of doing things. It is very helpful when you want to override a higher specificity element or in case of equal specificity. For example:\n      p {\n        color: red !important;\n        }\n      #thing {\n        color: green;\n        }\n      <p id="thing">Hello</p>     /*The color will br red because !important overrides the ID Selector*/\n       \n       But using !important excessively makes it harder to maintain CSS and debugging more difficult.\n')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);