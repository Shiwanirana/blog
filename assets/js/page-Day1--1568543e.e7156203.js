(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{493:function(a,e,s){"use strict";s.r(e);var t=s(2),i=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"day-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#day-1"}},[a._v("#")]),a._v(" Day 1")]),a._v(" "),s("p",[s("em",[a._v("12/7/2020")])]),a._v(" "),s("h2",{attrs:{id:"what-i-learned-in-coding-school-is"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-i-learned-in-coding-school-is"}},[a._v("#")]),a._v(" What i learned in coding school is...")]),a._v(" "),s("p",[a._v("how to code")]),a._v(" "),s("h2",{attrs:{id:"what-is-scope"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-scope"}},[a._v("#")]),a._v(" What is Scope?")]),a._v(" "),s("p",[a._v("A scope defines a boundary to a variable. When ever a variable is declared, it can be accessed by various functions according to its boundary limits. A scope can be of two types:")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("Local Scope: It has a limited boundary or it bs accessed within a limited area. If a variable is defined inside of a particular function, its scope is local to that unction,which means only that function can access that variable.")])]),a._v(" "),s("li",[s("p",[a._v("Global Scope: As per the name, it has global access,which means if a variable is globally declared, any function can access its value when ever is required. It is always declared outside of a function.\nFor example:\nvar y=5;\nfunction number(){"),s("br"),a._v("\nvar x = 3;"),s("br"),a._v("\nconsole.log(x);    Result of console.log(x) is: 3(Local in scope)\nconsole.log(y);    Result of console.log(y) is: 5(Global in scope)\n}")])])]),a._v(" "),s("h2",{attrs:{id:"what-is-hoisting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-is-hoisting"}},[a._v("#")]),a._v(" What is Hoisting?")]),a._v(" "),s("p",[a._v("When you use some function or variable even before declaring them, it is known as hoisting. It is a default behavior of javascript. One of the benefit of hoisting is that it allows a function call even before it appears in the code.")]),a._v(" "),s("h2",{attrs:{id:"in-what-cases-might-you-use-let-vs-const-vs-var"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#in-what-cases-might-you-use-let-vs-const-vs-var"}},[a._v("#")]),a._v(" In what cases might you use let vs const vs var?")]),a._v(" "),s("p",[a._v("Var has a global scope, while const and let has a local scope. Var variables can be re-declared and updates within its scope, let variables can be updated but can not be re-declared where as const variables can neither be updated nor re-declared. So if you know the value of your variable is fixed, you can use 'const' else 'var' or 'let' as per the requirement and scope.")])])}),[],!1,null,null,null);e.default=i.exports}}]);