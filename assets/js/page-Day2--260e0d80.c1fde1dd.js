(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{504:function(e,t,s){"use strict";s.r(t);var a=s(2),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"day-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#day-2"}},[e._v("#")]),e._v(" Day 2")]),e._v(" "),s("p",[s("em",[e._v("1/5/2020")])]),e._v(" "),s("h2",{attrs:{id:"what-i-learned-in-coding-school-is"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-i-learned-in-coding-school-is"}},[e._v("#")]),e._v(" What i learned in coding school is...")]),e._v(" "),s("p",[e._v("how to code")]),e._v(" "),s("h2",{attrs:{id:"_1-what-are-the-three-states-of-a-promise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-what-are-the-three-states-of-a-promise"}},[e._v("#")]),e._v(" 1. What are the three states of a Promise?")]),e._v(" "),s("p",[e._v("Promise--\x3e It means instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in future.\nIt is created by using a 'new' keyword.\nA promise has three states:\n1. Pending--\x3e The promise is started but not finished.\n2. Resolved--\x3e The promise is completed successfully.\n3. Rejected--\x3e The promise has failed.")]),e._v(" "),s("h2",{attrs:{id:"_2-how-do-promise-seek-to-resolve-the-issues-of-callback-hell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-how-do-promise-seek-to-resolve-the-issues-of-callback-hell"}},[e._v("#")]),e._v(' 2. How do promise seek to resolve the issues of "callback hell"?')]),e._v(" "),s("p",[e._v("By using multiple async methods, we will quickly go into a callback hell situation but by using promises into your code callback hell can be avoided since it will be more cleaner and easier to read.")]),e._v(" "),s("h2",{attrs:{id:"_3-what-is-the-difference-between-then-and-catch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-what-is-the-difference-between-then-and-catch"}},[e._v("#")]),e._v(" 3. What is the difference between .then() and .catch() ?")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v('  .then() is only for resolved, whereas, if a promise fails, we can use .catch().\n  For example:\n  function asyncFunction(){\n    return new Promise((resolve, reject)=>{\n      setTimeout(()=> {\n        let num = Math.random() * 100;\n        if (num<50){\n          resolve("Success!");\n        }else{\n          reject("Failed!")\n        }\n      }, Math.random() * 3000)\n    })\n  }\n\n  asyncFunction()\n  .then(result =>{\n    console.log(result);                         /*If num=45   output: Success!*/\n  })\n  .catch(error=>{\n    console.log(error);                          /*If num=60   Output: Failed!*/\n  })\n\n\n  Day-2 Afternoon Project:   https://shiwanirana.github.io/mvc-gregslistapi/.')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);