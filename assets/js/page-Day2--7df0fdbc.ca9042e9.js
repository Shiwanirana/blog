(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{494:function(e,a,t){"use strict";t.r(a);var n=t(2),r=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"day-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#day-2"}},[e._v("#")]),e._v(" Day 2")]),e._v(" "),t("p",[t("em",[e._v("12/8/2020")])]),e._v(" "),t("h2",{attrs:{id:"what-i-learned-in-coding-school-is"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-i-learned-in-coding-school-is"}},[e._v("#")]),e._v(" What i learned in coding school is...")]),e._v(" "),t("p",[e._v("how to code")]),e._v(" "),t("h2",{attrs:{id:"_1-what-are-the-three-ways-to-syntactically-write-a-function-what-are-the-differences-in-how-the-function-acts-if-any"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-what-are-the-three-ways-to-syntactically-write-a-function-what-are-the-differences-in-how-the-function-acts-if-any"}},[e._v("#")]),e._v(" 1. What are the three ways to syntactically write a function? What are the differences in how the function acts(if any)?")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("  The three ways are:\n  1. Function Declaration: A declared function can be saved for later use and will be executed when it is called.\n  It is hoisted which means it can be used before it is defined.\n  Syntax:\n  function function-name(parameters){//code here}\n  2. Function Expression: A function can be defined as an expression and can be stored in a variable.\n  It is not hoisted, so can not be used before it is defined. \n  Syntax:\n  var x= function(parameters)\n  3. Arrow Function Expression: An arrow function is a short form for function expression.\n  Syntax:\n  var x=(parameters)=>{//code}\n")])])]),t("h2",{attrs:{id:"_2-what-is-the-difference-between-parameters-and-arguments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-what-is-the-difference-between-parameters-and-arguments"}},[e._v("#")]),e._v(" 2. What is the difference between Parameters and Arguments?")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("  Parameters: are the variables listed as a part of the function definition.\n  Arguments: are the values passed to the function when it is invoked.\n  For example:\n  function function-name(parameter1,parameter2){     /*function sum(x,y){      */\n    //code here                                      /*       //code here      */\n  }                                                  /*      }                 */\n\n  function-name(argument1,argument2)                  /* sum(2,5)             */\n")])])]),t("h2",{attrs:{id:"_3-what-are-higher-order-functions-can-you-provide-an-example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-what-are-higher-order-functions-can-you-provide-an-example"}},[e._v("#")]),e._v(" 3. What are higher order functions? Can you provide an example?")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("  A Higher-Order function is a function that receives a function as an argument or returns the function as output. \n  For example:\n  1. Array.prototype.map: It is used to convert each element of an array.\n  For example:\n  let arr1=[1,2,3,4,5]\n  let arr2=arr1.map(number=>number*2)\n  console.log(arr2)                                                                            /*Output: arr2=[2,4,6,8,10]*/\n  2. Array.prototype.filter: It is used to select certain items of an array. It accepts 3 arguments.\n  For example:\n  let arr1=[1,2,5,7,4,8,3]\n  let arr2= arr1.filter(number=>number>=5)\n  console.log(arr2)                                                                           /*Output: arr2=[5,7,8]*/\n  3. Array.prototype.reduce: It is used to execute the callback function on each member of the calling array which results in a    single output value. It accepts two parameters.\n  For example:\n  let arr=[1,2,3,4,5]\n  let sum= arr.reduce(function(accumulator,currentValue){return accumulator+currentValue})    \n  console.log(sum)                                                                            /*Output: 15*/")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);